<?php
namespace app\common\components;

use think\Config;
use think\Db;

class Database extends Db
{
    protected static $connect = CONNECT;
    protected static $table;
    protected static $config;
    protected static $fields = [
        'common'=>[
            'create_time',
            'modify_time',
        ],
        'Order'=>[
            'id',
        ],
    ];

    public function __construct($connect = [])
    {
        if(empty($connect)){
            $connect = self::$connect;
        }
        self::setConfig($connect);
    }

    public static function connect($config = [], $name = false)
    {
        $config = self::$connect;
        return parent::connect($config, $name); // TODO: Change the autogenerated stub
    }

    public function checkHiddenFields($fieldsName)
    {
        $hiddenFields = $this->getHiddenFields();
        if (in_array($fieldsName,$hiddenFields)){
            return true;
        }
        return false;
    }

    public function getHiddenFields()
    {
        $tableName = self::$table;
        $connect = self::$connect;
        $hidden = self::$fields['common'];
        if(isset($fields[$connect])){
            $hidden = array_merge($hidden, $fields[$connect]);
        }elseif(isset($fields[$tableName])){
            $hidden = array_merge($hidden, $fields[$tableName]);
        }
        return $hidden;
    }

    public static function setConfig($config = [])
    {
        if (empty($config)) {
            $config = Config::get('database');
        } elseif (is_string($config) && false === strpos($config, '/')) {
            $config = Config::get($config);
        }
        self::$config = $config;
    }

    public static function setConnect($connect = [])
    {
        if(empty($connect)){
            $connect = self::$connect;
        }
        self::setConfig($connect);
        return new self();
    }

    public static function setTableName($tableName){

        if(!isset(self::$config)){
            self::setConnect();
        }
        $tableName = self::$config['prefix'] . $tableName;
        self::$table = $tableName;
        return new self();
    }

    public function getTableName()
    {
        $tableName = self::$table;
        $prefix = self::$config['prefix'];
        if(!empty($prefix)){
            $tableName = str_replace($prefix,'',$tableName);
        }
        return $tableName;
    }

    public static function setTable($tableName)
    {
        self::$table = $tableName;
        if(!isset(self::$config)){
            $connect = self::setConnect();
            return $connect;
        }
        return new self();
    }

    public function getTable()
    {
        return self::$table;
    }

    public static function getConnect()
    {
        return self::$connect;
    }

    public static function getColumnNameAndColumnComment($tableName = '')
    {
        if(!empty($tableName)){
            self::setTable($tableName);
        }
        $fields = self::table('INFORMATION_SCHEMA.Columns')
            ->where('table_name',self::$table)
            ->where('table_schema', self::$config['database'])
            ->field('COLUMN_NAME as name,COLUMN_COMMENT as comment')
            ->select();
        return $fields;
    }

    public static function getAllTables($database = 'db_name')
    {
        if(isset(self::$config)){
            $database = self::$config['database'];
        }
        $tables = self::table('INFORMATION_SCHEMA.TABLES')
            ->where('table_schema',$database)
            ->field('table_name')
            ->select();
        return $tables;
    }
}